import React from 'react';
import { useState, useEffect } from 'react';

import Form from 'react-bootstrap/Form';
import Button from 'react-bootstrap/Button';

import { postQuestion, createQuestionDTO } from "./HandleQuestionDTO";

// Creation for a Question of type 3: "Fill-in-the-Blank".
function CreateFillInTheBlank() { 
    const [validated, setValidated] = useState(false); // Form validator.
    const [questionDTO, setQuestionDTO] = useState(createQuestionDTO); //DTO object is constructed in HandleQuestionDTO component.
    const [extraAnswers, setExtraAnwers] = useState([]);

    // This inputIndex hook will decide how many additional Answer input fields should be rendered.
    const [inputIndex, setInputIndex] = useState(0);

    // Set question type.
    useEffect(() => { setQuestionDTO({ ...questionDTO, type: 3 }) }, []);

    // Checking form before sending DTO to the next handler.
    async function handleSubmit(event) {
        event.preventDefault();

        // Reset Form validation.
        setValidated(true);

        console.log(questionDTO);

         // Send to HandleQuestionDTO component.
        await postQuestion(questionDTO);
    }

    // Input handlers
    const handleTopicInput = (event) => {
        const { name, value } = event.currentTarget;

        setQuestionDTO({
            ...questionDTO,
            topic: value,
        });
    }

    const handleDescriptionInput = (event) => {
        const { name, value } = event.currentTarget;

        setQuestionDTO({
            ...questionDTO,
            description: value,
        });
    }

    const handleQuestionStringInput = (event) => {
        const { name, value } = event.currentTarget;

        setQuestionDTO({
            ...questionDTO,
            questionString: value,
        });
    }

    // The code below is managing dynamic HTML

    // Setting the questionDTO's answer array index 0 to the given value.
    const handleCorrectAnswerInput = (event) => {
        const { name, value } = event.currentTarget;

        // Setting the Correct Answer as the guaranteed first answer, then re-adding the extraAnswers array to the array.
        // This is some complex destructuring. This was difficult to figure out.
        setQuestionDTO({
            ...questionDTO,
            answers: [value, ...extraAnswers],
        })
    }

    // Adding answer to the questionDTO's answer array.
    const handleExtraAnswerInput = (event) => {
        const { name, value } = event.currentTarget;
        let index = event.currentTarget.id

        // Setting an extraAnswers index to the value of the Input field.
        // Index and value come from the event variable generated by the oneField function which renders dynamic HTML.
        extraAnswers[index] = value;

        setQuestionDTO({
            ...questionDTO,
            answers: [questionDTO.answers[0], ...extraAnswers],
        })
    }

    // Generates 1 input field with a label, key and Id based on the given parameter.
    const oneField = (prop) => {
        return (
            <Form.Group className="mb-3" controlId={`${prop}`} key={prop}>
                <Form.Label>{`Incorrect Answer ${prop + 1}`}</Form.Label>
                <Form.Control
                    type="text"
                    className="text-center"
                    onChange={handleExtraAnswerInput}
                />
            </Form.Group>
        );
    }

    // Generate new "extra incorrect answers" input fields depending on the inputIndex hook's number.
    // inputIndex incrementing is handled in the HTML below.
    const createExtraAnswerInputs = () => {
        let inputFieldArray = [];

        for (let i = 0; i < inputIndex && i < 9; i++) {
            inputFieldArray.push(oneField(i))
        }

        return inputFieldArray;
    }
    
    //HTML from here on out.
    return (
        <div className='Create-Custom-Question-Form' alt="Div containing custom question form.">
            <Form noValidate validated={validated} onSubmit={handleSubmit} className='mt-3'>

                <Form.Group className="mb-3" controlId="validationForTopic">
                    <Form.Label>Question Topic</Form.Label>
                    <Form.Control
                        required
                        type="text"
                        placeholder="Topic name"
                        className="text-center"
                        onChange={handleTopicInput}
                    />
                    <Form.Control.Feedback type="invalid">Please fill in a Topic name.</Form.Control.Feedback>
                </Form.Group>

                <Form.Group className="mb-3" controlId="validationForDescription">
                    <Form.Label>Question Description</Form.Label>
                    <Form.Control
                        required
                        type="text"
                        placeholder="Select the correct answer"
                        className="text-center"
                        onChange={handleDescriptionInput}
                    />
                    <Form.Control.Feedback type="invalid">Please fill in a Description.</Form.Control.Feedback>
                </Form.Group>

                <Form.Group className="mb-3" controlId="validationForQuestion">
                    <Form.Label>Question</Form.Label>
                    <Form.Control
                        required
                        type="text"
                        placeholder="To be or not to ..."
                        className="text-center"
                        onChange={handleQuestionStringInput}
                    />
                    <Form.Control.Feedback type="invalid">Please fill in the Question.</Form.Control.Feedback>
                </Form.Group>

                <Form.Group className="mb-3" controlId="validationForCorrectAnswer">
                    <Form.Label>Correct Answer</Form.Label>
                    <Form.Control
                        required
                        type="text"
                        placeholder="Be"
                        className="text-center"
                        onChange={handleCorrectAnswerInput}
                    />
                    <Form.Control.Feedback type="invalid">Please fill in an Answer.</Form.Control.Feedback>
                </Form.Group>

                <hr className='create-question-hr' />
                <p>Add up to 9 additional correct answers <br /> (not required)</p>
                { localStorage.setItem("Hello!", "Did you know: Coding has over 700 languages? The US only has about 350!") }
                <hr />

                {/* {
                    answers.map((ans, index) => {

                        if(index < 9) {
                            return (
                                <Form.Group className="mb-3" controlId={`${index + 1}`} key={index}>
                                    <Form.Label>{`Additional Answer ${index + 1}`}</Form.Label>
                                    <Form.Control
                                        type="text"
                                        className="text-center"
                                        onChange={handleAnswerInput}
                                    />
                                </Form.Group>
                            )
                        }
                    }) 
                } */}
                {
                    createExtraAnswerInputs()
                }

                <Button
                     variant="primary" 
                     onClick={ () => setInputIndex(prevIndex => prevIndex + 1) }
                >
                    Add extra Answer!
                </Button>

                <Button 
                    variant="primary" 
                    type="submit"
                >
                    Create question!
                </Button>
            </Form>
        </div>
    )
}

export default CreateFillInTheBlank

